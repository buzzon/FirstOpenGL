#include "paint.h"

void paint::draw_rocket_launcher()
{
	glPushMatrix();									// Сохраняю видовую матрицу
		glutSolidCube(0.4);							// Рисую куб
		glTranslatef(0.15, 0.10, -0.2);				// Смещаю
		glRotatef(90, 1, 0, 0);						// Поворачиваю
		for (int i = 0; i < 4; ++i)					// Рисую конусы (ракетки)
		{
			b_engine::draw_cylinder(8, 0.05, 0.02, 0.12);
			glTranslatef(-0.1, 0, 0);
		}
	glPopMatrix();									// Возвращаю матрицу в изначальное состояние
}

void paint::draw_turret()
{
	// Массив вершин
	GLfloat turret[24][3] =
	{
		// крышка
		{0.0, 0.6, -0.9},	// 0
		{-0.5, 0.6, -0.9},
		{-0.6, 0.6, -0.5},
		{-0.8, 0.6, -0.3},
		{-0.8, 0.6, 0.3},
		{-0.6, 0.6, 0.5},
		{-0.4, 0.6, 2.6},
		{ 0.0, 0.6, 2.6},	// 7

		// фасад
		{ 0.0, 0.2, -1.3}, // 8
		{ -0.6, 0.2, -1.3},
		{ -0.8, 0.2, -1.0},
		{ -1.5, 0.2, -0.5},
		{ -1.5, 0.2, 0.5},
		{ -0.8, 0.2, 0.7},
		{ 0.0, 0.2, 1.2},
		{ -0.6, 0.3, 2.9},
		{ 0.0, 0.3, 2.9},	// 15

		// дно
		{ 0.0, 0.0, -1.2},	// 17
		{ -0.5, 0.0, -1.2},
		{ -0.7, 0.0, -0.9},
		{ -1.4, 0.0, -0.4},
		{ -1.4, 0.0, 0.4},
		{ -0.7, 0.0, 0.6},
		{ 0.0, 0.0, 1.1}	//24

	};

	// Массив полигонов
	GLint turret_triangles[40][3] =
	{
		// крышка
		{0,1,2},
		{0,2,3},
		{0,3,4},
		{0,4,5},
		{0,5,6},
		{0,6,7},

		//фасад верх
		{8,1,0},
		{8,9,1},
		{9,10,1},
		{10,2,1},
		{10,3,2},
		{10,11,3},
		{11,12,3},
		{12,4,3},
		{12,13,4},
		{13,5,4},
		{13,6,5},
		{13,15,6},
		{15,16,6},
		{16,7,6},

		//фасад верх-низ
		{13,14,15},
		{14,16,15},

		//фасад низ
		{17,18,8},
		{8,18,9},
		{9,18,10},
		{18,19,10},
		{19,10,9},
		{19,20,10},
		{10,20,11},
		{11,20,21},
		{21,12,11},
		{12,21,13},
		{13,21,22},
		{13,22,23},
		{13,23,14},

		//дно
		{17,19,18},
		{17,20,19},
		{17,21,20},
		{17,22,21},
		{17,23,22}
	};

	// Рисую симметрично башню, в массиве вершин и полигонов задана только одна половина модели по оси x
	for (auto& triangle : turret_triangles)
		b_engine::draw_triangle_sim_x(&turret[triangle[0]][0], &turret[triangle[1]][0], &turret[triangle[2]][0]);

	// Пимпочка на башне
	glPushMatrix();									// Сохраняю видовую матрицу
		glTranslatef(0.3, 0.7, 0);					// Смещаю
		b_engine::draw_cylinder(16, 0.2, 0.3, 0.2);	// Рисую цилиндр
	glPopMatrix();									// Возвращаю матрицу в изначальное состояние

	// ракетница 1
	glPushMatrix();									// Сохраняю видовую матрицу
		glTranslatef(1, 0.32, 0);					//
		glRotatef(-30, 0, 1, 1);					// Позиционирую
		glRotatef(30, 1, 0, 0);						//
		draw_rocket_launcher();						// Рисую ракетницу
	glPopMatrix();									// Возвращаю матрицу в изначальное состояние

	// ракетница 2
	glPushMatrix();									// Сохраняю видовую матрицу
		glTranslatef(-1, 0.32, 0);					//
		glRotatef(30, 0, 1, 1);						//	Позиционирую
		glRotatef(30, 1, 0, 0);						//
		draw_rocket_launcher();						// Рисую ракетницу
	glPopMatrix();									// Возвращаю матрицу в изначальное состояние
}

void paint::draw_hatch()
{
	glPushMatrix();												   // Сохраняю видовую матрицу
		b_engine::draw_cylinder(16, 0.5, 0.5, 0.1);				   //
		glTranslatef(0, 0.075, 0);								   //
		b_engine::draw_cylinder(16, 0.4, 0.5, 0.05);			   // 3 цилиндра == люк
		b_engine::draw_cylinder(16, 0.1, 0.5, 0.1);				   //
	glPopMatrix();												   // Возвращаю матрицу в изначальное состояние
}

void paint::draw_base()
{
	// Массив вершин
	GLfloat base[25][3] =
	{
		//крышка
		{0.0,0.0,-3.2},	// 0
		{-2.2,0.0,-3.2},
		{-2.2,0.2,-1.4},
		{-2.1,0.0,-1.2},
		{-2.0,0.0,3.4},
		{0.0,0.0,3.4},
		{0.0,0.0,-1.2},
		{0.0,0.2,-1.4}, // 7

		// фасад
		{0.0,-0.5,-3.4}, // 8
		{-1.3,-0.5,-3.4},
		{-2.2,-0.4,-3.4},
		{-2.3,-0.4,-3.4},
		{-2.3,-0.2,-1.3},
		{-2.3,-0.2,3.6},
		{0,-0.2,3.6},	//14

		// дно
		{0.0,-1.0,-2.5}, //15
		{-1.3,-1.0,-2.5},
		{-1.3,-1.0,3.8},
		{0.0,-1.0,3.9},
		{-2.3,-1.0,3.9},
		{-2.2,-1.0,3.8},
		{-2.3,-1.0,-2.5},
		{-2.2,-1.0,-2.5}, //22

		//под крылом
		{-1.3,-0.3,3.5}, //23
		{-2.2,-0.3,3.5} //24 
	};

	// Массив полигонов
	GLint base_triangles[40][3] =
	{
		// крышка
		{0,1,7},
		{1,2,7},
		{2,3,7},
		{7,3,6},
		{6,3,5},
		{5,3,4},

		// фасад верх
		{0,8,9},
		{0,9,1},
		{1,9,10},
		{1,10,11},
		{1,11,12},
		{1,12,2},
		{2,12,3},
		{3,12,13},
		{3,13,4},
		{4,13,14},
		{4,14,5},

		// фасад перед
		{9,8,15},
		{9,15,16},

		// фасад перед / крыло
		{10,21,11},
		{21,10,22},

		// фасад стоона
		{11,22,12},
		{12,22,19},
		{12,19,13},

		// фасад спина
		{13,19,18},
		{13,18,14},

		// дно
		{15,17,16},
		{15,18,17},
		{17,18,19},
		{17,19,20},
		{22,20,21},
		{21,20,19},

		//под крылом
		{9,16,23},
		{23,16,17},
		{23,17,20},
		{24,23,20},
		{24,20,22},
		{24,22,10},
		{9,23,10},
		{10,23,24},
	};

	// Рисую симметрично базу, в массиве вершин и полигонов задана только одна половина модели по оси x
	for (auto& triangle : base_triangles)
		b_engine::draw_triangle_sim_x(&base[triangle[0]][0], &base[triangle[1]][0], &base[triangle[2]][0]);


	// люки
	glPushMatrix();												   // Сохраняю видовую матрицу
		glTranslatef(0, 0, 2);									   // Позиционирую

		draw_hatch();											   // Рисую люк

		glTranslatef(1, 0.1, -4.2);								   // Позиционирую
		glRotatef(-6, 1, 0, 0);									   //

		draw_hatch();											   // Рисую люк
	glPopMatrix();												   // Возвращаю матрицу в изначальное состояние
}

void paint::draw_muzzle()
{
	glPushMatrix();													// Сохраняю видовую матрицу
		glTranslatef(0, 0.4, -3);									// Позиционирую
		
		// крепление
		glPushMatrix();												// Сохраняю видовую матрицу
			glTranslatef(0, 0.0, 1.9);								// Позиционирую
			glRotatef(90, 1, 0, 0);									//
			glutSolidCube(0.35);									// Рисую куб
		glPopMatrix();												// Возвращаю матрицу в изначальное состояние

		// дуло
		glPushMatrix();												// Сохраняю видовую матрицу
			glRotatef(90, 1, 0, 0);									// Позиционирую
			b_engine::draw_cylinder(16, 0.1, 0.1, 4);				// Рисую цилиндр
		glPopMatrix();												// Возвращаю матрицу в изначальное состояние

		// глушитель
		glTranslatef(0, 0.0, -2);									// Сохраняю видовую матрицу
		glRotatef(90, 1, 0, 0);										// Позиционирую
		b_engine::draw_cylinder(16, 0.12, 0.16, 0.35);				// Рисую цилиндр
	glPopMatrix();													// Возвращаю матрицу в изначальное состояние
}

void paint::draw_part_track()
{
	GLfloat base[12][3] =
	{
		//крышка
		{ -0.43, 0.03, -0.1 },	// 0
		{ -0.43, 0.03, 0.07 },	// 1
		{ -0.35, 0.03, 0.1 },	// 2
		{ 0.35, 0.03, 0.1 },	// 3
		{ 0.43, 0.03, 0.07 },	// 4
		{ 0.43, 0.03, -0.1 },	// 5

								//крышка
		{ -0.43, -0.03, -0.1 },	// 0
		{ -0.43, -0.03, 0.07 },	// 1
		{ -0.35, -0.03, 0.1 },	// 2
		{ 0.35, -0.03, 0.1 },	// 3
		{ 0.43, -0.03, 0.07 },	// 4
		{ 0.43, -0.03, -0.1 },	// 5
	};

	GLint base_triangles[20][3] =
	{
		{ 0,1,2 },
		{ 0,2,3 },
		{ 0,3,4 },
		{ 0,4,5 },

		{ 6,8,7 },
		{ 6,9,8 },
		{ 6,10,9 },
		{ 6,11,10 },

		// стенка
		{ 0,6,1 },
		{ 6,7,1 },

		{ 1,7,2 },
		{ 7,8,2 },

		{ 2,8,3 },
		{ 8,9,3 },

		{ 3,9,4 },
		{ 9,10,4 },

		{ 4,10,5 },
		{ 10,11,5 },

		{ 5,11,0 },
		{ 11,6,0 },
	};

	GLfloat bracing[8][3] =
	{
		//крышка
		{ -0.05, 0.025, -0.1 },	// 0
		{ -0.05, 0.025, 0.1 },	// 1
		{ 0.05, 0.025, 0.1 },	// 2
		{ 0.05, 0.025, -0.1 },	// 3

								//дно
		{ -0.05, -0.025, -0.13 },	// 0
		{ -0.05, -0.025, 0.13 },	// 1
		{ 0.05, -0.025, 0.13 },	// 2
		{ 0.05, -0.025, -0.13 }	// 3
	};

	GLint bracing_triangles[][3] =
	{
		{ 0,1,2 },
		{ 0,2,3 },

		{ 4,6,5 },
		{ 4,7,6 },

		//стенка
		{ 0,4,1 },
		{ 4,5,1 },
		{ 1,5,2 },
		{ 5,6,2 },
		{ 2,6,3 },
		{ 6,7,3 },
		{ 3,7,4 },
		{ 0,3,4 },
	};

	glPushMatrix();

	// Основная пластина
	glTranslatef(0, 0, -0.18);
	b_engine::draw_object(base_triangles, std::size(base_triangles), base);

	// зубцы крепления
	glTranslatef(0.0, 0, 0.1);
	b_engine::draw_object(bracing_triangles, std::size(bracing_triangles), bracing);
	glTranslatef(0.3, 0, 0);
	b_engine::draw_object(bracing_triangles, std::size(bracing_triangles), bracing);
	glTranslatef(-0.6, 0, 0);
	b_engine::draw_object(bracing_triangles, std::size(bracing_triangles), bracing);
	glTranslatef(0.15, 0, -0.2);
	b_engine::draw_object(bracing_triangles, std::size(bracing_triangles), bracing);
	glTranslatef(0.3, 0, 0);
	b_engine::draw_object(bracing_triangles, std::size(bracing_triangles), bracing);

	// штифт
	glTranslatef(-0.15, 0, -0.09);
	glRotatef(90, 0, 0, 1);
	b_engine::draw_cylinder(5, 0.02, 0.02, 0.6);

	glPopMatrix();
}

void paint::draw_tracks()
{
	glPushMatrix();

	// передняя часть гусеницы
	for (int i = 0; i < 5; i++)
	{
		draw_part_track();
		glTranslatef(0, 0, -0.35);
		glRotatef(-36, 1, 0, 0);
	}

	// низ гусеницы
	for (int i = 0; i < 18; i++)
	{
		draw_part_track();
		glTranslatef(0, 0, -0.35);
	}

	// задняя часть гусеницы
	for (int i = 0; i < 5; i++)
	{
		draw_part_track();
		glTranslatef(0, 0, -0.35);
		glRotatef(-36, 1, 0, 0);
	}

	// верх гусеницы
	for (int i = 0; i < 18; i++)
	{
		draw_part_track();
		glTranslatef(0, 0, -0.35);
	}

	// Колёса
	glTranslatef(0, -0.5, 0);
	glRotatef(90, 0, 0, 1);
	for (int i = 0; i < 5; ++i)
	{
		b_engine::draw_cylinder(16, 0.3, 0.3, 0.5);
		b_engine::draw_cylinder(16, 0.6, 0.6, 0.4);
		glTranslatef(0, 0, 1.5);
	}

	glPopMatrix();
}

void paint::draw_panzer()
{
	glPushMatrix();
		glTranslatef(0, 1.6, 0);
		draw_turret();
		draw_base();
		draw_muzzle();

		glPushMatrix();
			glTranslatef(1.75, -0.5, -3);
			draw_tracks();
			glTranslatef(-3.5, 0, 0);
			draw_tracks();
		glPopMatrix();
	glPopMatrix();
}